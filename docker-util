#!/usr/bin/env php
<?php
$isEmbedded = preg_match("/\/vendor\/symplur\$/", dirname(__DIR__));
$baseDir = realpath(__DIR__ . ($isEmbedded ? '/../../../' : '/'));

require "$baseDir/vendor/autoload.php";

use Dotenv\Dotenv;
use Symfony\Component\Console\Output\ConsoleOutput;
use Symplur\Workflow\Manager;

$envUtil = Dotenv::create($baseDir, '.env.ecs');
$envUtil->overload();
$envUtil->required(['ECS_CODEBASE', 'ECS_REPO_HOST', 'ECS_CLUSTER_PROD', 'ECS_CLUSTER_DEV'])
    ->notEmpty();

$codebase = getenv('ECS_CODEBASE');
$repoHost = getenv('ECS_REPO_HOST');
$clusterNames = preg_split("/\s*,\s*/", trim(getenv('ECS_CLUSTERS_NAMES'), ', '));
$strictCommitClusters = preg_split("/\s*,\s*/", trim(getenv('ECS_STRICT_COMMIT_CLUSTERS'), ', '));
$hostIp = trim(shell_exec("ifconfig | grep '\<inet\>' | cut -d ' ' -f2 | grep -v '127.0.0.1'"));
$localPort = (int)getenv('ECS_LOCAL_PORT');

error_reporting(-1);
ini_set('display_errors', 'On');

set_error_handler(function ($level, $message, $file = '', $line = 0) {
    if (error_reporting() & $level) {
        throw new ErrorException($message, 0, $level, $file, $line);
    }
});

chdir($baseDir);

$output = new ConsoleOutput;

if (!$hostIp) {
    $output->writeln('<error>Unable to determine host IP</error>');
    exit;
}

$ecs = new Manager($hostIp, $baseDir, $repoHost, $clusterNames, $strictCommitClusters, $output);

$action = @$_SERVER['argv'][1];
switch ($action) {
    case 'deploy':
        $cluster = ($_SERVER['argv'][2] ?? null);
        if (!$cluster) {
            $output->writeln('<error>Missing second argument. Must specify which ECS cluster to use.</error>');
            exit;
        }

        if (getenv('ECS_IS_CRON')) {
            $ecs->deployCron($cluster, $codebase);
        } else {
            $ecs->deployService($cluster, $codebase);
        }
        break;

    case 'build':
        $ecs->build($codebase);
        break;

    case 'run':
        $mounted = (in_array($_SERVER['argv'][2] ?? null, ['-m', '--mount']));
        $ecs->run($codebase, $localPort, $mounted);
        break;

    case 'stop':
        $ecs->stop($codebase);
        break;

    default:
        $output->writeln('<error>Invalid action "' . $action . '"</error>');
}
